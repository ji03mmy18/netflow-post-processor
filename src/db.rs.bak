pub fn store_data(flow: NetflowV4, flow_type: u8, pool: &Pool<PostgresConnectionManager<NoTls>>) {
    let naive_dt = NaiveDateTime::parse_from_str(&flow.first, "%Y-%m-%dT%H:%M:%S.%3f")
        .expect("DateTime Parse error!");
    let tz = FixedOffset::east_opt(8 * 3600).expect("TimeZone Parse error!");
    let dt = naive_dt.and_local_timezone(tz).unwrap();
    
    let date = dt.naive_local().date();
    let hour: i16 = dt.format("%H").to_string().parse().unwrap();
    let bytes = i64::try_from(flow.in_bytes).expect("i64 Parse error: size not enough!");
    let nf_name = format!("nf_{}", dt.format("%Y_%m").to_string());

    let src_ip_v4: Ipv4Addr = flow.src4_addr.parse().expect("IP invalid or parser not working!");
    let dst_ip_v4: Ipv4Addr = flow.dst4_addr.parse().expect("IP invalid or parser not working!");
    let mask_src: MaskedIpAddr = From::from(src_ip_v4);
    let mask_dst: MaskedIpAddr = From::from(dst_ip_v4);

    match flow_type {
        1 => {
            let ip_ref = get_ip_ref(mask_dst, pool.get().unwrap());
            let nf_id = get_nf_id(ip_ref, &date, &hour, &nf_name, pool.get().unwrap());
            update_extra_in(nf_id, &nf_name, bytes, pool.get().unwrap());
        },
        2 => {
            let ip_ref = get_ip_ref(mask_src, pool.get().unwrap());
            let nf_id = get_nf_id(ip_ref, &date, &hour, &nf_name, pool.get().unwrap());
            update_extra_out(nf_id, &nf_name, bytes, pool.get().unwrap());
        },
        3 => {
            let src_ref = get_ip_ref(mask_src, pool.get().unwrap());
            let dst_ref = get_ip_ref(mask_dst, pool.get().unwrap());
            let src_id = get_nf_id(src_ref, &date, &hour, &nf_name, pool.get().unwrap());
            let dst_id = get_nf_id(dst_ref, &date, &hour, &nf_name, pool.get().unwrap());
            update_intra(src_id, dst_id, &nf_name, bytes, pool.get().unwrap());
        },
        _ => () //println!("Flow Skip...")
    };
}

fn update_extra_in(nf_id: Uuid, nf_name: &String, bytes: i64, mut client: PooledConnection<PostgresConnectionManager<NoTls>>) {
    client.execute(&format!("UPDATE {nf_name} SET extra_in = extra_in + $1 WHERE id = $2;"), &[&bytes, &nf_id]).unwrap();
}

fn update_extra_out(nf_id: Uuid, nf_name: &String, bytes: i64, mut client: PooledConnection<PostgresConnectionManager<NoTls>>) {
    client.execute(&format!("UPDATE {nf_name} SET extra_out = extra_out + $1 WHERE id = $2;"), &[&bytes, &nf_id]).unwrap();
}

fn update_intra(src_id: Uuid, dst_id: Uuid, nf_name: &String, bytes: i64, mut client: PooledConnection<PostgresConnectionManager<NoTls>>) {
    client.execute(&format!("UPDATE {nf_name} SET intra_in  = intra_in  + $1 WHERE id = $2;"), &[&bytes, &dst_id]).unwrap();
    client.execute(&format!("UPDATE {nf_name} SET intra_out = intra_out + $1 WHERE id = $2;"), &[&bytes, &src_id]).unwrap();
}